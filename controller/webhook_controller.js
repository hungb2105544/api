const WebhookModel = require("../model/webhook_model");

class WebhookController {
  static async handleWebhook(req, res) {
    const intent = req.body.queryResult.intent.displayName;
    const params = req.body.queryResult.parameters || {};

    console.log(`‚û°Ô∏è Intent nh·∫≠n ƒë∆∞·ª£c: ${intent}`);
    console.log("üì¶ Parameters:", params);
    let responseText = "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu c√¢u h·ªèi n√†y.";

    switch (intent) {
      case "iKhuyenMai": {
        const productDiscount = await WebhookModel.getPromotion();
        if (productDiscount && productDiscount.length > 0) {
          const promoList = productDiscount
            .map((p) => `üéâ ${p.name} - Gi·∫£m ${p.discount_percentage}%`)
            .join("\n");
          responseText = `Hi·ªán t·∫°i b√™n m√¨nh ƒëang c√≥ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i sau:\n${promoList}`;
        } else {
          responseText = "Hi·ªán t·∫°i ch∆∞a c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i n√†o.";
        }
        break;
      }

      case "iDiaChi": {
        const vouchers = await WebhookModel.getStoreAddress();
        if (vouchers && vouchers.length > 0) {
          const voucherList = vouchers
            .map((branch) => {
              // Ki·ªÉm tra xem c√≥ th√¥ng tin ƒë·ªãa ch·ªâ kh√¥ng
              if (!branch.addresses)
                return `üè¨ ${branch.name} - (Ch∆∞a c√≥ th√¥ng tin ƒë·ªãa ch·ªâ)`;

              const { street, ward, district, province } = branch.addresses;
              const fullAddress = [street, ward, district, province]
                .filter(Boolean)
                .join(", ");

              return `\nüìç *${branch.name}*\n   üè† ƒê·ªãa ch·ªâ: ${fullAddress}\n   üìû ƒêi·ªán tho·∫°i: ${branch.phone}`;
            })
            .join("\n\n");
          console.log(voucherList);
          responseText = `D∆∞·ªõi ƒë√¢y l√† ƒë·ªãa ch·ªâ c√°c c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i:\n${voucherList}`;
        } else {
          responseText = "Hi·ªán t·∫°i ch∆∞a c√≥ ƒë·ªãa ch·ªâ c·ª≠a h√†ng n√†o.";
        }
        break;
      }

      case "iVoucher": {
        const vouchers = await WebhookModel.getAllVoucher();
        if (vouchers && vouchers.length > 0) {
          const voucherList = vouchers
            .map((voucher) => {
              const expiryDate = new Date(voucher.valid_to).toLocaleDateString(
                "vi-VN"
              );
              let discountInfo = "";
              if (voucher.type === "percentage") {
                discountInfo = `gi·∫£m ${voucher.value}%`;
              } else if (voucher.type === "fixed_amount") {
                discountInfo = `gi·∫£m ${new Intl.NumberFormat("vi-VN").format(
                  voucher.value
                )}ƒë`;
              } else {
                discountInfo = "mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn";
              }

              const description = voucher.description
                ? ` (${voucher.description})`
                : "";
              return `üéÅ *${voucher.name}*${description}:\n   üè∑Ô∏è M√£: *${voucher.code}* - ${discountInfo}\n   ‚è≥ H·∫°n s·ª≠ d·ª•ng: ${expiryDate}`;
            })
            .join("\n\n");
          responseText = `Tuy·ªát v·ªùi! Hi·ªán t·∫°i shop ƒëang c√≥ c√°c voucher sau, b·∫°n c√≥ th·ªÉ d√πng ngay nh√©:\n\n${voucherList}`;
        } else {
          responseText =
            "Ti·∫øc qu√°, hi·ªán t·∫°i shop ch∆∞a c√≥ voucher n√†o, b·∫°n quay l·∫°i sau nh√©.";
        }
        break;
      }
      default:
        responseText = "Xin l·ªói, m√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán cho y√™u c·∫ßu n√†y.";
    }

    return res.json({
      fulfillmentText: responseText,
    });
  }
}

module.exports = WebhookController;
